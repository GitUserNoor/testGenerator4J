/*  * This program is licensed under Common Public License Version 0.5. * * For License Information and conditions of use, see "LICENSE" in packaged *  */package org.jtestcase.core.model;import java.util.ArrayList;import java.util.List;import org.jdom.Element;import org.jtestcase.plugin.guimodel.intf.IUINode;import org.jtestcase.plugin.guimodel.intf.IUINodeSupport;/** * Represents an assert tag from the JTestCaseWizard XML. *  * @author <a href="mailto:fausto_lelli@hotmail.com">Fausto Lelli </a> *  * $Id: AssertInstance.java,v 1.2 2005/11/22 09:54:09 faustothegrey Exp $ */public class AssertInstance implements AbstractType, IUINode {	/**	 * The name of the assert	 */	public String name = "";	/**	 * The type of the assert	 */	public String type = "";	/**	 * The content of the assert element	 */	public String content = "";	/**	 * The type of the keys for complex types in assert elements	 */	public String key_type = "";	/**	 * The type of the value for complex types in assert elements	 */	public String value_type = "";	/**	 * The list of nested instances in the assert	 */	public List nestedInstances = null;		/**	 * The jice element held withing	 */	public Element jice = null;		/**	 * The action string for this assert	 */	private String action = "";	private IUINodeSupport uiSupport = null;	private boolean isGUIsupported = false;		/**	 * Standard constructor. Sets all internal members.	 * 	 * @param name	 *            the name of the assert	 * @param type	 *            the type of the assert	 * @param action	 *            the action string for this assert	 * @param content	 *            the content of the assert element	 * @param key_type	 *            the type of the keys for complex types in assert elements	 * @param value_type	 *            the type of the value for complex types in assert elements	 */	public AssertInstance(String name, String type, String action,			String content, String key_type, String value_type) {		if (name != null)			this.name = name;		else			name = "";		if (type != null)			this.type = type;		else			type = "";		if (action != null)			this.action = action;		else			action = "";		if (key_type != null)			this.key_type = key_type;		else			key_type = "";		if (value_type != null)			this.value_type = value_type;		else			value_type = "";		if (content != null)			this.content = content;		else			content = "";		nestedInstances = new ArrayList();		if(isGUIsupported)instantiateUISupport();	}	/**	 * 	 */	private void instantiateUISupport() {		try {			uiSupport = (IUINodeSupport) Class.forName(IUINodeSupport.IMPL)					.newInstance();			uiSupport.setNode(this);			setGUIsupported(true);		} catch (InstantiationException e) {			// TODO Auto-generated catch block			//System.err.println("WARN : NOT USING UI SUPPORT");			// e.printStackTrace();		} catch (IllegalAccessException e) {			// TODO Auto-generated catch block			//System.err.println("WARN : NOT USING UI SUPPORT");			// e.printStackTrace();		} catch (ClassNotFoundException e) {			// TODO Auto-generated catch block			//System.err.println("WARN : NOT USING UI SUPPORT");			// e.printStackTrace();		}			}	/**	 * Sets the name of the assert	 * 	 * @param name	 *            the name of the assert	 */	public void setName(String name) {		this.name = name;	}	/**	 * Sets the type of the assert	 * 	 * @param type	 *            the type of the assert	 */	public void setType(String type) {		this.type = type;	}	/**	 * Sets the action of the assert	 * 	 * @param action	 *            the action of the assert	 */	public void setAction(String action) {		this.action = action;	}	/**	 * Sets the content of the assert element	 * 	 * @param content	 *            the content of the assert element	 */	public void setContent(String content) {		this.content = content;	}	/**	 * @see org.jtestcase.core.model.AbstractType#getName()	 */	public String getName() {		return name;	}	/**	 * @see org.jtestcase.core.model.AbstractType#getType()	 */	public String getType() {		return type;	}	/**	 * Returns the action of the assert	 * 	 * @return the action of the assert	 */	public String getAction() {		return action;	}	/**	 * @see org.jtestcase.core.model.AbstractType#getContent()	 */	public String getContent() {		return content;	}	/**	 * @see org.jtestcase.core.model.AbstractType#getJice()	 */	public Element getJice(){		return jice;	}		/**	 * @see org.jtestcase.core.model.AbstractType#getKey_type()	 */	public String getKey_type() {		return this.key_type;	}	/**	 * Sets the type of the keys for complex types in assert elements	 * 	 * @param key_type	 *            the type of the keys for complex types in assert elements	 */	public void setKey_type(String key_type) {		this.key_type = key_type;	}	/**	 * @see org.jtestcase.core.model.AbstractType#getValue_type()	 */	public String getValue_type() {		return this.value_type;	}	/**	 * Sets the type of the value for complex types in assert elements	 * 	 * @param value_type	 *            the type of the value for complex types in assert elements	 */	public void setValue_type(String value_type) {		this.value_type = value_type;	}	/**	 * Adds a nested assert instance to the list of nested instances	 * 	 * @param nestedInstance	 *            an assert instance	 */	public void addAssert(AssertInstance nestedInstance) {		nestedInstances.add(nestedInstance);		//uiSupport.add(nestedInstance);	}	public void removeAssert(AssertInstance nestedInstance) {		nestedInstances.remove(nestedInstance);		// if we have gui support		if (nestedInstance instanceof IUINode)			uiSupport.remove((IUINode) nestedInstance);	}	/**	 * @see org.jtestcase.core.model.AbstractType#getNestedInstances()	 */	public List getNestedInstances() {		return nestedInstances;	}	public Object getUISupport() {		return uiSupport;	}	public String getNodeImage() {		return "sample.gif";	}	public String getNodeLabel() {		return getName();	}	/**	 * Callback function should delegate to addAssert()	 * 	 */	public void add(IUINode toAdd) {		// this is a bit of gui login, should do it in a separate module		if (toAdd instanceof AssertInstance) {			System.out.println("Cannot add type : "					+ toAdd.getClass().getName() + " to assert");		} else			addAssert((AssertInstance) toAdd);	}	public IUINode getNode() {		return uiSupport.getNode();	}	// public void accept(IXMLModelVisitor visitor, Object passAlongArgument) {	// uiSupport.accept(visitor, passAlongArgument);	// }	public List getNodes() {		return uiSupport.getNodes();	}	public void remove(IUINode toRemove) {		uiSupport.remove(toRemove);	}	public int size() {		return uiSupport.size();	}	/**	 * two ExpectedInstances should be considered equal if their fields are	 * equal name field is case sensitive type field is not case sensitive ( to	 * review ) content field is case sensitive	 * 	 * @param anotherExpectedInstance	 * @return boolean	 */	public boolean equals(AssertInstance anotherExpectedInstance) {		if (!(this.getName().equals(anotherExpectedInstance.getName()))) {			return false;		} else if (!(this.getType().equalsIgnoreCase(anotherExpectedInstance				.getType()))) {			return false;		} else if (!(this.getContent().equals(anotherExpectedInstance				.getContent()))) {			return false;		} else if (!(this.getAction().equalsIgnoreCase(anotherExpectedInstance				.getAction()))) {			return false;		}		return true;	}	/**	 * @see java.lang.Object#toString()	 */	public String toString() {		return "<assert> name " + this.name + " type " + this.type + " action "				+ this.action + " content " + this.content + "</assert>";	}	public boolean isGUIsupported() {		return isGUIsupported;	}		public void setGUIsupported(boolean isGUIsupported) {		this.isGUIsupported = isGUIsupported;	}	    /**     * Creates an assert instance from an assert element.     * Creates the instance without the nested instances.     * @param expected the assert element     * @return an assert instance     */	public static AssertInstance createAssertInstance(Element expected) {		String expected_name = expected.getAttributeValue("name");		String expected_type = expected.getAttributeValue("type");		String expected_action = expected.getAttributeValue("action");		String expected_key_type = expected.getAttributeValue("key-type");		String expected_value_type = expected.getAttributeValue("value-type");		String param_jice = expected.getAttributeValue("use-jice");		String expected_content = expected.getTextTrim();				AssertInstance parameter = null;				if (!"yes".equalsIgnoreCase(param_jice)) {			parameter = createAssertInstance(expected_name,expected_type,expected_action,expected_content,expected_key_type,expected_value_type);		}		else {			parameter = createAssertInstance(expected_name,expected_type,expected_action,expected_content,expected_key_type,expected_value_type, expected.getChild("jice"));		}				return parameter;	}	public static AssertInstance createAssertInstance(String name, String type, String action,			String content, String key_type, String value_type) {		AssertInstance expectedInst = new AssertInstance(name,				type, action, content, key_type, value_type);		return expectedInst;	}		public static AssertInstance createAssertInstance(String name, String type, String action,			String content, String key_type, String value_type, Element jice) {		AssertInstance expectedInst = new AssertInstance(name,				type, action, content, key_type, value_type);		expectedInst.jice = jice;		return expectedInst;	}	}