/*  * This program is licensed under Common Public License Version 0.5. * * For License Information and conditions of use, see "LICENSE" in packaged *  */package org.jtestcase.core.model;import java.util.List;import java.util.ArrayList;import org.jdom.Element;/** * Represents an param tag from the JTestCaseWizard XML. *  * @author <a href="mailto:fausto_lelli@hotmail.com">Fausto Lelli</a> *  * $Id: ParamInstance.java,v 1.2 2005/11/22 09:54:09 faustothegrey Exp $ */public class ParamInstance implements AbstractType {    /**     * The name of the param     */	private String name = "";    /**     * The type of the param     */	private String type = "";    /**     * The content of the param element     */	private String content = "";    /**     * The type of the keys for complex types in param elements     */	private String key_type = "";    /**     * The type of the value for complex types in param elements     */	private String value_type = "";    /**     * The list of nested instances in the param     */	private List nestedParams;		/** 	 * The jice element held within	 */	private Element jice = null;	    /**     * Standard constructor.      * Sets all internal members.     * @param name the name of the param     * @param type the type of the param     * @param content the content of the param element     * @param key_type the type of the keys for complex types in param elements     * @param value_type the type of the value for complex types in param elements     */	public ParamInstance(String content, String name, String type,			String key_type, String value_type) {		if (name != null)			this.name = name;		else			name = "";		if (type != null)			this.type = type;		else			type = "";		if (key_type != null)			this.key_type = key_type;		else			key_type = "";		if (value_type != null)			this.value_type = value_type;		else			value_type = "";		if (content != null)			this.content = content;		else			content = "";		this.nestedParams = new ArrayList();	}    public ParamInstance(String param_content, String param_name, String param_type, String param_key_type, String param_value_type, Element jice) {		this(param_content,param_name,param_type,param_key_type,param_value_type);		this.jice = jice;    }	/**     * Sets the name of the param     * @param name the name of the param     */	public void setName(String name) {		this.name = name;	}    /**     * Sets the type of the param     * @param type the type of the param     */	public void setType(String type) {		this.type = type;	}    /**     * Sets the content of the param element     * @param content the content of the param element     */	public void setContent(String content) {		this.content = content;	}    /**      * @see org.jtestcase.core.model.AbstractType#getKey_type()     */	public String getKey_type() {		return key_type;	}    /**      * @see org.jtestcase.core.model.AbstractType#getValue_type()     */	public String getValue_type() {		return value_type;	}    /**     * @see org.jtestcase.core.model.AbstractType#getName()     */	public String getName() {		return name;	}    /**     * @see org.jtestcase.core.model.AbstractType#getType()     */	public String getType() {		return type;	}    /**     * @see org.jtestcase.core.model.AbstractType#getContent()     */	public String getContent() {		return content;	}    /**     * Adds a nested param instance to the list of nested instances     * @param nestedInstance an param instance     */	public void addParam(ParamInstance nestedInstance) {		nestedParams.add(nestedInstance);	}    /**      * @see org.jtestcase.core.model.AbstractType#getNestedInstances()     */	public List getNestedInstances() {		return nestedParams;	}	/**	 * two paramInstances should be considered equal if their fields are equal	 * name field is case sensitive type field is not case sensitive ( to review )	 * content field is case sensitive note: this function does NOT check for	 * the nested param istances	 * 	 * @param anotherParamInstance	 * @return boolean	 */	public boolean equals(ParamInstance anotherParamInstance) {		if (!(this.getName().equals(anotherParamInstance.getName()))) {			return false;		} else if (!(this.getType().equalsIgnoreCase(anotherParamInstance				.getType()))) {			return false;		} else if (!(this.getContent()				.equals(anotherParamInstance.getContent()))) {			return false;		} else if (!(this.getKey_type().equals(anotherParamInstance				.getKey_type()))) {			return false;		} else if (!(this.getValue_type().equals(anotherParamInstance				.getValue_type()))) {			return false;		}		return true;	}    /**     * @see java.lang.Object#toString()     */	public String toString() {		return "<param> name " + this.name + " type " + this.type + " content "				+ this.content + "</param>";	}	/**	 * The jice element held within	 */	public Element getJice() {		return jice;	}}